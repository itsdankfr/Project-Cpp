#include <graphics.h>
#include <iostream>
#include <thread>
#include <chrono>
#include <iomanip>
#include <conio.h>

void drawSquareColon(int x, int y, int size) {
    setcolor(RED);  // Đặt màu đỏ cho dấu :
    setfillstyle(SOLID_FILL, RED);

    int squareSize = size / 5; // Kích thước của hình vuông (kích thước tỉ lệ với segmentSize)

    // Vẽ hai hình vuông nhỏ để biểu diễn dấu ':'
    bar(x - squareSize / 2, y - size / 2 - squareSize / 2, x + squareSize / 2, y - size / 2 + squareSize / 2);  // H�nh vu�ng tr�n
    bar(x - squareSize / 2, y + size / 2 - squareSize / 2, x + squareSize / 2, y + size / 2 + squareSize / 2);  // H�nh vu�ng du?i
}

void drawSegment(int x1, int y1, int x2, int y2, bool on) {
    if (on) {
        setcolor(RED);
        setfillstyle(SOLID_FILL, RED);
    } else {
        setcolor(BLACK);
        setfillstyle(SOLID_FILL, BLACK);
    }
    bar(x1, y1, x2, y2);
}

void drawDigit(int x, int y, int digit, int segmentSize) {
    int width = segmentSize;
    int height = segmentSize / 4;
    int spacing = height;

    bool segments[10][7] = {
        {1, 1, 1, 1, 1, 1, 0},
        {0, 0, 1, 0, 0, 1, 0},
        {1, 0, 1, 1, 1, 0, 1},
        {1, 0, 1, 1, 0, 1, 1},
        {0, 1, 1, 0, 0, 1, 1},
        {1, 1, 0, 1, 0, 1, 1},
        {1, 1, 0, 1, 1, 1, 1},
        {1, 0, 1, 0, 0, 1, 0},
        {1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 0, 1, 1}
    };

    drawSegment(x + spacing, y, x + width + spacing, y + height, segments[digit][0]);
    drawSegment(x, y + spacing, x + height, y + width + spacing, segments[digit][1]);
    drawSegment(x + width + spacing, y + spacing, x + width + spacing + height, y + width + spacing, segments[digit][2]);
    drawSegment(x + spacing, y + 2 * width + 2 * spacing, x + width + spacing, y + 2 * width + 2 * spacing + height, segments[digit][3]);
    drawSegment(x, y + width + 2 * spacing, x + height, y + 2 * width + 2 * spacing, segments[digit][4]);
    drawSegment(x + width + spacing, y + width + 2 * spacing, x + width + spacing + height, y + 2 * width + 2 * spacing, segments[digit][5]);
    drawSegment(x + spacing, y + width + spacing, x + width + spacing, y + width + spacing + height, segments[digit][6]);
}

void displayTime(int hours, int minutes, int seconds, int segmentSize) {
    cleardevice();
    setbkcolor(BLACK);

    int digits[6] = {
        hours / 10, hours % 10,
        minutes / 10, minutes % 10,
        seconds / 10, seconds % 10
    };

    for (int i = 0; i < 2; ++i) {
        drawDigit(60 + i * (segmentSize * 2 + 40), 100, digits[i], segmentSize);
    }
    
    drawSquareColon(308, 170, segmentSize);

    for (int i = 2; i < 4; ++i) {
        drawDigit(350 + (i - 2) * (segmentSize * 2 + 40), 100, digits[i], segmentSize);
    }
    
    drawSquareColon(608, 170, segmentSize);
    
    for (int i = 4; i < 6; ++i) {
        drawDigit(650 + (i - 4) * (segmentSize * 2 + 40), 100, digits[i], segmentSize);
    }
}

// Hàm hiển thị tốc độ 
void displaySpeed(double speed) {
    setcolor(WHITE);
    setbkcolor(BLACK);

    // Hiển thị tốc độ ở góc dưới bên phải
    std::ostringstream ss;
    ss << std::fixed << std::setprecision(1) << speed << "x";
    std::string speedText = ss.str();

    // Tăng kích thước văn bản
    settextstyle(SANS_SERIF_FONT, HORIZ_DIR, 4);
    outtextxy(800, 400, const_cast<char*>(speedText.c_str()));
}

int main() {
    int gd = DETECT, gm;
    initgraph(&gd, &gm, "");

    int width = 1000;
    int height = 500;
    initwindow(width, height, "LED 7 Segment Timer");

    int totalSeconds;
    std::cout << "Enter total time in seconds: ";
    std::cin >> totalSeconds;
    totalSeconds %= 86400; //Một ngày có 86400s
    std::cout << "\nManual:\n";
	std::cout << "Press <p> for pause\n";	
	std::cout << "Press <r> for resume\n";
	std::cout << "Press <e> for end\n";
	std::cout << "Press <+> for speed up 0,5x\n";
	std::cout << "Press <-> for slow down 0,5x\n";
	std::cout << "Press <a> for adding 60 seconds\n";
	std::cout << "Press <m> for minus 60 seconds\n";
    bool paused = false;
    double speed = 1.0;  // T?c d? m?c d?nh

    for (int i = totalSeconds; i >= 0; --i) {
        if (kbhit()) {
            char ch = getch();
            if (ch == 'p') {
                paused = true; // Tạm dừng khi nhận phím 'p'
            } else if (ch == 'r') {
                paused = false; // Tiếp tục khi nhận phím 'r'
            } else if (ch == 'e') {
                break;  // Thoát khỏi vòng lặp khi nhận phím 'e'
            } else if (ch == '+') {
                speed = (speed >= 3.0) ? 3.0 : speed + 0.5;
            } else if (ch == '-') {
                speed = (speed <= 0.5) ? 0.5 : speed - 0.5;
            } else if (ch == 'a') {
                i += 60;  // Tăng 60 giây
            } else if (ch == 'm') {
                i = (i >= 60) ? i - 60 : 0;  // Giảm 60 giây, không thấp hơn 0
            }
        }

        if (!paused) {
            int hours = i / 3600;
            int minutes = (i % 3600) / 60;
            int seconds = i % 60;

            displayTime(hours, minutes, seconds, 50);
            displaySpeed(speed);  // Hiển thị tốc độ hiện tại
            std::this_thread::sleep_for(std::chrono::milliseconds(static_cast<int>(1000 / speed)));
        } else {
            ++i;  // Giữ nguyên thờii gian khi tạm dừng
        }
    }

    cleardevice();
    outtextxy(200, 200, "Time's up!");

    getch();
    closegraph();
    return 0;
}

